import random
import telebot
from telebot import types
import configparser
from sqlalchemy.orm import sessionmaker
from sqlalchemy import func
from sqlalchemy import create_engine, Column, Integer, String, UniqueConstraint
from sqlalchemy.orm import sessionmaker, declarative_base
from telebot.states import StatesGroup, State
from create_DBdict import engine, Word, User as DBUser
from telebot.storage import StateMemoryStorage

storage = StateMemoryStorage()


# –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
config = configparser.ConfigParser()
config.read("settings.ini", encoding="utf-8-sig")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
TOKEN = config["Tokens"]["TOKEN"]

bot = telebot.TeleBot(TOKEN, state_storage=storage)
class Command:
    ADD_WORD = 'üí° –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üí°'
    DELETE_WORD = '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå'
    NEXT = 'ü§∑‚Äç‚ôÇÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ ü§∑‚Äç'

class MyStates(StatesGroup):
    target_word = State()
    russian_word = State()
    wrong_words = State()
    waiting_for_english_word = State()
    waiting_for_translation = State()
    waiting_for_username = State()

Session = sessionmaker(bind=engine)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ö–µ–Ω–¥–ª–µ—Ä, —É—á–∏—Ç –±–æ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —á—Ç–æ-–ª–∏–±–æ, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    session = Session()
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç, —è –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –æ–±—É—á–∞—Ç–µ–ª—å! –ó–Ω–∞—é —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã /start , /help –∏ /start_studying')
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    user = session.query(DBUser).filter(DBUser.user_id == user_id).first()

    if not user:
        # **–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
        new_user = DBUser(user_id=user_id, username=f"user_{user_id}")
        session.add(new_user)
        session.commit()

        # **–ö–æ–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –∏–∑ –æ–±—â–µ–π –±–∞–∑—ã –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
        common_words = session.query(Word).filter(Word.user_id == None).all()
        if common_words:
            for word in common_words:
                new_word = Word(
                    english_word=word.english_word,
                    russian_translation=word.russian_translation,
                    user_id=user_id
                )
                session.add(new_word)
            session.commit()
            bot.send_message(message.chat.id, "üìö –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–æ–≤–∞—è –±–∞–∑–∞ —Å–ª–æ–≤! –í–≤–µ–¥–∏—Ç–µ /start_studying.")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –û–±—â–∞—è –±–∞–∑–∞ —Å–ª–æ–≤ –ø—É—Å—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    else:
        bot.send_message(message.chat.id, "üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start_studying")

    session.close()

@bot.message_handler(state=MyStates.waiting_for_username, content_types=['text'])
def save_username(message):
    session = Session()
    user_id = message.from_user.id
    username = message.text.strip()

    existing_user = session.query(DBUser).filter(DBUser.user_id == user_id).first()
    if not existing_user:
        new_user = DBUser(user_id=user_id, username=username)
        session.add(new_user)
        session.commit()

        bot.send_message(message.chat.id, f"üëã {username}, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É!")

        # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ë–î
        common_words = session.query(Word).filter(Word.user_id == None).all()
        if common_words:
            words_to_add = [
                Word(english_word=w.english_word, russian_translation=w.russian_translation, user_id=user_id)
                for w in common_words
            ]
            if words_to_add:
                session.bulk_save_objects(words_to_add)
                session.commit()
                bot.send_message(message.chat.id, "üìö –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–æ–≤–∞—è –±–∞–∑–∞ —Å–ª–æ–≤! –í–≤–µ–¥–∏—Ç–µ /start_studying.")
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –û–±—â–∞—è –±–∞–∑–∞ —Å–ª–æ–≤ –ø—É—Å—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –û–±—â–∞—è –±–∞–∑–∞ —Å–ª–æ–≤ –ø—É—Å—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    else:
        bot.send_message(message.chat.id, f"üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {existing_user.username}!")

    session.close()
    bot.delete_state(user_id, message.chat.id)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã NEXT
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def skip_word(message):
    studying(message)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã DELETE_WORD
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    session = Session()
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ Telegram

    with bot.retrieve_data(user_id, message.chat.id) as data:
        if 'target_word' not in data:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤.")
            return

        target_word = data['target_word']

    word_entry = session.query(Word).filter(Word.english_word == target_word, Word.user_id == user_id).first()

    if word_entry:
        session.delete(word_entry)
        session.commit()
        bot.send_message(message.chat.id, f"‚úÖ –°–ª–æ–≤–æ *{target_word}* —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã!", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–π –±–∞–∑–µ.")

    session.close()
    studying(message)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã ADD_WORD
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def request_english_word(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    bot.set_state(user_id, MyStates.waiting_for_english_word, chat_id)
    bot.add_data(user_id, chat_id, {"new_english_word": None})  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ—Ç–æ–≤–∫—É
    bot.send_message(chat_id, "‚úç –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:")

@bot.message_handler(state=MyStates.waiting_for_english_word, content_types=['text'])
def request_translation(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    with bot.retrieve_data(user_id, chat_id) as data:
        data.update({'new_english_word': message.text.strip().lower()})

    bot.set_state(user_id, MyStates.waiting_for_translation, chat_id)
    bot.send_message(chat_id, "üî§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")

@bot.message_handler(state=MyStates.waiting_for_translation, content_types=['text'])
def save_word_to_db(message):
    session = Session()
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    with bot.retrieve_data(user_id, chat_id) as data:
        if 'new_english_word' not in data:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ.")
            return

        english_word = data['new_english_word']
        russian_translation = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_word = session.query(Word).filter(Word.english_word == english_word, Word.user_id == user_id).first()
    if existing_word:
        bot.send_message(chat_id, f"‚ö†Ô∏è –°–ª–æ–≤–æ *{english_word}* —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π –±–∞–∑–µ.", parse_mode="Markdown")
    else:
        new_word = Word(english_word=english_word, russian_translation=russian_translation, user_id=user_id)
        session.add(new_word)
        session.commit()
        bot.send_message(chat_id, f"‚úÖ –°–ª–æ–≤–æ *{english_word}* ‚Üí *{russian_translation}* –¥–æ–±–∞–≤–ª–µ–Ω–æ!", parse_mode="Markdown")

    session.close()
    bot.delete_state(user_id, chat_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    studying(message)

@bot.message_handler(commands=['start_studying'])
def studying(message):
    session = Session()
    user_id = message.from_user.id

    words_count = session.query(Word).filter(Word.user_id == user_id).count()
    if words_count == 0:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –≤ –±–∞–∑–µ! –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π 'üí° –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üí°' –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        session.close()
        return

    word_pair = session.query(Word).filter(Word.user_id == user_id).order_by(func.random()).first()
    if not word_pair:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π 'üí° –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üí°'."
        )
        session.close()
        return

    russian_word = word_pair.russian_translation
    target_word = word_pair.english_word

    wrong_words = session.query(Word.english_word).filter(
        Word.user_id == user_id, Word.english_word != target_word
    ).order_by(func.random()).limit(3).all()

    wrong_words = [w[0] for w in wrong_words]

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(target_word)] + [types.KeyboardButton(word) for word in wrong_words]
    random.shuffle(buttons)
    markup.add(
        *buttons,
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD),
        types.KeyboardButton(Command.NEXT)
    )

    bot.send_message(
        message.chat.id,
        f"üîπ –ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: *{russian_word}*?",
        reply_markup=markup,
        parse_mode="Markdown"
    )

    bot.set_state(user_id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(user_id, message.chat.id) as data:
        data.update({'target_word': target_word, 'russian_word': russian_word, 'wrong_words': wrong_words})

    session.close()

@bot.message_handler(func=lambda message: True, content_types=['text'])
def check_answer_or_handle_state(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    state = bot.get_state(user_id, chat_id)

    if state == MyStates.waiting_for_english_word.name:
        request_translation(message)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞
        return
    elif state == MyStates.waiting_for_translation.name:
        save_word_to_db(message)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        return

    # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—Å—Ç–µ
    with bot.retrieve_data(user_id, chat_id) as data:
        if not data or 'target_word' not in data:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_studying, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–≤–µ—á–∞—Ç—å!")
            return

        target_word = data['target_word']

    if message.text.strip().lower() == target_word.lower():
        bot.send_message(chat_id, 'üî• –°–ª–æ–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤–µ—Ä–Ω–æ! üî•')
        studying(message)  # –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
    else:
        bot.send_message(chat_id, '‚ùå –ù–µ –≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë ‚ùå')

@bot.message_handler(commands=['help'])
def answer_to_help(message):
    bot.reply_to(message, '–ü–æ–º–æ–≥–∏ —Å–µ–±–µ —Å–∞–º!')

if __name__ == '__main__':
    print('Bot starts!')
    # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.polling()