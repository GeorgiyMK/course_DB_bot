import random
import telebot
from telebot import types
import configparser
from sqlalchemy.orm import sessionmaker
from sqlalchemy import func
from sqlalchemy import create_engine, Column, Integer, String, UniqueConstraint
from sqlalchemy.orm import sessionmaker, declarative_base
from telebot.states import StatesGroup, State
from create_DBdict import engine, Word

# –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
config = configparser.ConfigParser()
config.read("settings.ini", encoding="utf-8-sig")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
TOKEN = config["Tokens"]["TOKEN"]

bot = telebot.TeleBot(TOKEN)
class Command:
    ADD_WORD = 'üí° –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üí°'
    DELETE_WORD = '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå'
    NEXT = 'ü§∑‚Äç‚ôÇÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ ü§∑‚Äç‚ôÇÔ∏è'

class MyStates(StatesGroup):
    target_word = State()
    russian_word = State()
    wrong_words = State()

Session = sessionmaker(bind=engine)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ö–µ–Ω–¥–ª–µ—Ä, —É—á–∏—Ç –±–æ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —á—Ç–æ-–ª–∏–±–æ, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç, —è –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –æ–±—É—á–∞—Ç–µ–ª—å! –ó–Ω–∞—é —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã /start , /help –∏ /start_studying')

@bot.message_handler(commands=['start_studying'])
def studying(message):
    session = Session()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ë–î
    word_pair = session.query(Word).order_by(func.random()).first()
    if not word_pair:
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞! ‚ö†Ô∏è")
        return
    russian_word = word_pair.russian_translation
    target_word = word_pair.english_word

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–ª–æ–≤–∞
    wrong_words = (
        session.query(Word.english_word)
        .filter(Word.english_word != target_word) # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã –Ω–µ –±—ã–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –≤–µ—Ä–Ω—ã–º —Å–ª–æ–≤–æ–º
        .order_by(func.random())
        .limit(3)
        .all()
    )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    wrong_words = [w[0] for w in wrong_words]

    # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    target_word_btn = types.KeyboardButton(target_word)
    wrong_words_btns = [types.KeyboardButton(word) for word in wrong_words]

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [target_word_btn] + wrong_words_btns
    random.shuffle(buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø. –∫–Ω–æ–ø–∫–∏
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    next_word_btn = types.KeyboardButton(Command.NEXT)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∞–∑–º–µ—Ç–∫—É
    markup.add(*buttons,add_word_btn, delete_word_btn, next_word_btn)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    bot.send_message(
        message.chat.id,
        f"üîπ –ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: *{russian_word}*?",
        reply_markup=markup,
        parse_mode="Markdown"
    )

    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['russian_word'] = russian_word
        data['wrong_words'] = wrong_words

    session.close()

@bot.message_handler(func=lambda message: True, content_types=['text'])
def check_answer(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        print(f"Retrieved state: {data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

        if 'target_word' not in data:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_studying, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–≤–µ—á–∞—Ç—å!")
            return

        target_word = data['target_word']

    if message.text == target_word:
        bot.send_message(message.chat.id, 'üî• –°–ª–æ–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤–µ—Ä–Ω–æ! üî•')
        studying(message)  # –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
    else:
        bot.send_message(message.chat.id, '‚ùå –ù–µ –≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë ‚ùå')

@bot.message_handler(commands=['help'])
def answer_to_help(message):
    bot.reply_to(message, '–ü–æ–º–æ–≥–∏ —Å–µ–±–µ —Å–∞–º!')

if __name__ == '__main__':
    print('Bot starts!')
    # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.polling()