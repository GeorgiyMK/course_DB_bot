import configparser
import requests
import random
import time
import PyPDF2
from sqlalchemy import create_engine, Column, Integer, String, UniqueConstraint
from sqlalchemy.orm import sessionmaker, declarative_base

# –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
config = configparser.ConfigParser()
config.read("settings.ini", encoding="utf-8-sig")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_NAME = config["Tokens"]["DB_NAME"]
DB_USER = config["Tokens"]["DB_USER"]
DB_PASSWORD = config["Tokens"]["DB_PASSWORD"]
DB_HOST = config["Tokens"]["DB_HOST"]
DB_PORT = int(config["Tokens"]["DB_PORT"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
YANDEX_API_KEY = config['Tokens']['YANDEX_API_KEY']
FOLDER_ID = config['Tokens']['FOLDER_ID']

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()


# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
class Word(Base):
    __tablename__ = "words"
    id = Column(Integer, primary_key=True, autoincrement=True)
    english_word = Column(String(15), unique=True, nullable=False)
    russian_translation = Column(String(15), nullable=False)

    __table_args__ = (UniqueConstraint("english_word", name="uq_english_word"),)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –∏–∑ PDF-—Ñ–∞–π–ª–∞
def extract_words_from_pdf(pdf_path, num_words=300):
    words = set()
    try:
        with open(pdf_path, "rb") as file:
            reader = PyPDF2.PdfReader(file)
            for page in reader.pages:
                text = page.extract_text()
                if text:
                    words.update(text.split())
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF: {e}")

    # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —Ü–∏—Ñ—Ä—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞
    words = {word.strip(".,!?()[]{}<>:;\"'").lower() for word in words if word.isalpha()}
    return random.sample(list(words), min(len(words), num_words))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞ —Å Yandex API
def translate_word(word):
    url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "targetLanguageCode": "ru",
        "texts": [word],
        "folderId": FOLDER_ID
    }
    print(f"üîç –ü–µ—Ä–µ–≤–æ–¥–∏–º: {word}")

    try:
        response = requests.post(url, json=data, headers=headers, timeout=5)
        if response.status_code == 200:
            translation = response.json().get("translations", [{}])[0].get("text", "")
            return translation if translation.lower() != word.lower() else None
        else:
            print(f"–û—à–∏–±–∫–∞ API {response.status_code}: {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def insert_words(pdf_path):
    words = extract_words_from_pdf(pdf_path, num_words=300)
    if not words:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ PDF.")
        return

    with SessionLocal() as session:
        for word in words:
            translation = translate_word(word)
            if translation:
                try:
                    existing_word = session.query(Word).filter_by(english_word=word).first()
                    if not existing_word:
                        new_word = Word(english_word=word, russian_translation=translation)
                        session.add(new_word)
                        session.commit()
                        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {word} - {translation}")
                except Exception as e:
                    session.rollback()
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ {word}: {e}")
            time.sleep(0.03)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è API


if __name__ == "__main__":
    Base.metadata.drop_all(engine) # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    Base.metadata.create_all(engine)  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    insert_words("Treasure_Island.pdf")
